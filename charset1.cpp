// Copyright (c) 2005 - 2021 kio@little-bat.de
// SPDX-License-Identifier: BSD-2-Clause

#include "cdefs.h"
#include "charset1.h"



const uchar charset1[] =
{
	0b00000000+1,  // space
	0b00000000,

	0b01011110+1,   // !

	0b00000110+1,   // "
	0b00000000,
	0b00000110,

	0b00100100+1,   // #
	0b01111110,
	0b00100100,
	0b00100100,
	0b01111110,
	0b00100100,

	0b01011100+1,   // $
	0b01010100,
	0b11111110,
	0b01010100,
	0b01110100,

	0b01000110+1,   // %
	0b00100110,
	0b00010000,
	0b00001000,
	0b01100100,
	0b01100010,

	0b00100000+1,   // &
	0b01010100,
	0b01001010,
	0b01010100,
	0b00100000,
	0b01010000,

	0b00000110+1,   // '

	0b00111100+1,   // (
	0b01000010,

	0b01000010+1,   // )
	0b00111100,

	0b00010000+1,   // *
	0b01010100,
	0b00111000,
	0b01010100,
	0b00010000,

	0b00010000+1,   // +
	0b00010000,
	0b01111100,
	0b00010000,
	0b00010000,

	0b10000000+1,   // ,
	0b01100000,

	0b00010000+1,   // -
	0b00010000,
	0b00010000,
	0b00010000,
	0b00010000,

	0b01100000+1,   // .
	0b01100000,

	0b01000000+1,   // /
	0b00100000,
	0b00010000,
	0b00001000,
	0b00000100,

	0b00111100+1,   // 0
	0b01100010,
	0b01011010,
	0b01000110,
	0b00111100,

	0b01000100+1,   // 1
	0b01000010,
	0b01111110,
	0b01000000,
	0b01000000,

	0b01100100+1,   // 2
	0b01010010,
	0b01010010,
	0b01010010,
	0b01001100,

	0b00100100+1,   // 3
	0b01000010,
	0b01001010,
	0b01001010,
	0b00110100,

	0b00110000+1,   // 4
	0b00101000,
	0b00100100,
	0b01111110,
	0b00100000,

	0b00101110+1,   // 5
	0b01001010,
	0b01001010,
	0b01001010,
	0b00110010,

	0b00111100+1,   // 6
	0b01001010,
	0b01001010,
	0b01001010,
	0b00110000,

	0b00000010+1,   // 7
	0b00000010,
	0b01110010,
	0b00001010,
	0b00000110,

	0b00110100+1,   // 8
	0b01001010,
	0b01001010,
	0b01001010,
	0b00110100,

	0b00001100+1,   // 9
	0b01010010,
	0b01010010,
	0b01010010,
	0b00111100,

	0b01001000+1,   // :

	0b10000000+1,   // ;
	0b01100100,

	0b00010000+1,   // <
	0b00101000,
	0b01000100,

	0b00101000+1,   // =
	0b00101000,
	0b00101000,
	0b00101000,

	0b01000100+1,   // >
	0b00101000,
	0b00010000,

	0b00000100+1,   // ?
	0b00000010,
	0b01010010,
	0b00001010,
	0b00000100,

	0b00111100+1,   // @
	0b01000010,
	0b01011010,
	0b01010110,
	0b01011010,
	0b00011100,

	0b01111100+1,   // A
	0b00010010,
	0b00010010,
	0b00010010,
	0b01111100,

	0b01111110+1,   // B
	0b01001010,
	0b01001010,
	0b01001010,
	0b00110100,

	0b00111100+1,   // C
	0b01000010,
	0b01000010,
	0b01000010,
	0b00100100,

	0b01111110+1,   // D
	0b01000010,
	0b01000010,
	0b01000010,
	0b00111100,

	0b01111110+1,   // E
	0b01001010,
	0b01001010,
	0b01001010,
	0b01000010,

	0b01111110+1,   // F
	0b00001010,
	0b00001010,
	0b00001010,
	0b00000010,

	0b00111100+1,   // G
	0b01000010,
	0b01010010,
	0b01010010,
	0b00110100,

	0b01111110+1,   // H
	0b00001000,
	0b00001000,
	0b00001000,
	0b01111110,

	0b01000010+1,   // I
	0b01111110,
	0b01000010,

	0b00110000+1,   // J
	0b01000000,
	0b01000000,
	0b00111110,

	0b01111110+1,   // K
	0b00011000,
	0b00011000,
	0b00100100,
	0b01000010,

	0b01111110+1,   // L
	0b01000000,
	0b01000000,
	0b01000000,

	0b01111110+1,   // M
	0b00000100,
	0b00001000,
	0b00001000,
	0b00000100,
	0b01111110,

	0b01111110+1,   // N
	0b00000100,
	0b00001000,
	0b00010000,
	0b00100000,
	0b01111110,

	0b00111100+1,   // O
	0b01000010,
	0b01000010,
	0b01000010,
	0b01000010,
	0b00111100,

	0b01111110+1,   // P
	0b00010010,
	0b00010010,
	0b00010010,
	0b00001100,

	0b00111100+1,   // Q
	0b01000010,
	0b01010010,
	0b01100010,
	0b01000010,
	0b00111100,

	0b01111110+1,   // R
	0b00010010,
	0b00010010,
	0b00110010,
	0b01001100,

	0b00100100+1,   // S
	0b01001010,
	0b01001010,
	0b01001010,
	0b00110000,

	0b00000010+1,   // T
	0b00000010,
	0b01111110,
	0b00000010,
	0b00000010,

	0b00111110+1,   // U
	0b01000000,
	0b01000000,
	0b01000000,
	0b00111110,

	0b00011110+1,   // V
	0b00100000,
	0b01000000,
	0b00100000,
	0b00011110,

	0b00111110+1,   // W
	0b01000000,
	0b00100000,
	0b00100000,
	0b01000000,
	0b00111110,

	0b01000010+1,   // X
	0b00100100,
	0b00011000,
	0b00011000,
	0b00100100,
	0b01000010,

	0b00000110+1,   // Y
	0b00001000,
	0b01110000,
	0b00001000,
	0b00000110,

	0b01000010+1,   // Z
	0b01100010,
	0b01010010,
	0b01001010,
	0b01000110,
	0b01000010,

	0b01111110+1,   // [
	0b01000010,
	0b01000010,

	0b00000100+1,   // "\"
	0b00001000,
	0b00010000,
	0b00100000,
	0b01000000,

	0b01000010+1,   // ]
	0b01000010,
	0b01111110,

	0b00001000+1,   // ^ (Pfeil hoch)
	0b00000100,
	0b01111110,
	0b00000100,
	0b00001000,

	0b10000000+1,   // _
	0b10000000,
	0b10000000,
	0b10000000,

	0b01001000+1,   // £
	0b01111100,
	0b01001010,
	0b01000010,
	0b01000100,

	0b00100000+1,   // a
	0b01010100,
	0b01010100,
	0b01010100,
	0b01111000,

	0b01111110+1,   // b
	0b01001000,
	0b01001000,
	0b01001000,
	0b00110000,

	0b00111000+1,   // c
	0b01000100,
	0b01000100,
	0b01000100,

	0b00110000+1,   // d
	0b01001000,
	0b01001000,
	0b01001000,
	0b01111110,

	0b00111000+1,   // e
	0b01010100,
	0b01010100,
	0b01010100,
	0b01001000,

	0b01111100+1,   // f
	0b00001010,
	0b00000010,

	0b00011000+1,   // g
	0b10100100,
	0b10100100,
	0b10100100,
	0b01111100,

	0b01111110+1,   // h
	0b00001000,
	0b00001000,
	0b00001000,
	0b01110000,

	0b01001000+1,   // i
	0b01111010,
	0b01000000,

	0b01000000+1,   // j
	0b10000000,
	0b01111010,
	0b00000000,

	0b01111110+1,   // k
	0b00010000,
	0b00101000,
	0b01000100,

	0b00111110+1,   // l
	0b01000000,
	0b01000000,

	0b01111100+1,   // m
	0b00000100,
	0b00000100,
	0b01111000,
	0b00000100,
	0b00000100,
	0b01111000,

	0b01111100+1,   // n
	0b00000100,
	0b00000100,
	0b00000100,
	0b01111000,

	0b00111000+1,   // o
	0b01000100,
	0b01000100,
	0b01000100,
	0b00111000,

	0b11111100+1,   // p
	0b00100100,
	0b00100100,
	0b00100100,
	0b00011000,

	0b00011000+1,   // q
	0b00100100,
	0b00100100,
	0b00100100,
	0b11111100,

	0b01111000+1,   // r
	0b00000100,
	0b00000100,
	0b00000100,

	0b01001000+1,   // s
	0b01010100,
	0b01010100,
	0b01010100,
	0b00100000,

	0b00000100+1,   // t
	0b00111110,
	0b01000100,
	0b01000000,

	0b00111100+1,   // u
	0b01000000,
	0b01000000,
	0b01000000,
	0b00111100,

	0b00001100+1,   // v
	0b00110000,
	0b01000000,
	0b00110000,
	0b00001100,

	0b00111100+1,   // w
	0b01000000,
	0b00111000,
	0b01000000,
	0b00111100,

	0b01000100+1,   // x
	0b00101000,
	0b00010000,
	0b00101000,
	0b01000100,

	0b00011100+1,   // y
	0b10100000,
	0b10100000,
	0b01111100,

	0b01000100+1,   // z
	0b01100100,
	0b01010100,
	0b01001100,
	0b01000100,

	0b00010000+1,   // {
	0b01111100,
	0b10000010,
	0b10000010,

	0b01111110+1,   // |

	0b10000010+1,   // }
	0b10000010,
	0b01101100,
	0b00010000,

	0b00000100+1,   // ~
	0b00000010,
	0b00000100,
	0b00000010,

	0b00111000+1,	// ©   (c)
	0b01000100,
	0b10010010,
	0b10101010,
	0b10101010,
	0b10000010,
	0b01000100,
	0b00111000,

	#define charcode_icursor 128
	0b11111110+1,

	#define charcode_arrow_left	128+1
	0b00010000+1,
	0b00111000,
	0b01111100,
	0b11111110,
	0b00111000,
	0b00111000,

	#define charcode_arrow_down	128+2
	0b00010000+1,
	0b00110000,
	0b01111100,
	0b11111100,
	0b01111100,
	0b00110000,
	0b00010000,

	#define charcode_arrow_up	128+3
	0b00010000+1,
	0b00011000,
	0b01111100,
	0b01111110,
	0b01111100,
	0b00011000,
	0b00010000,

	#define charcode_arrow_right  128+4
	0b00111000+1,
	0b00111000,
	0b11111110,
	0b01111100,
	0b00111000,
	0b00010000,


//#define charcode_io	128+1
//	0b00010000+1,
//	0b00101000,
//	0b01000100,
//	0b01000100,
//	0b01000100,
//	0b01000100,
//	0b00101000,
//	0b00010000,
//
//#define charcode_gnd	128+2
//	0b00111000+1,
//	0b01000100,
//	0b10010010,
//	0b10010010,
//	0b10010010,
//	0b01000100,
//	0b00111000,
//
//#define charcode_vcc	128+3
//	0b00111000+1,
//	0b01000100,
//	0b10010010,
//	0b10111010,
//	0b10010010,
//	0b01000100,
//	0b00111000,
//
//#define charcode_3state	128+4
//	0b00000110+1,
//	0b00011010,
//	0b01100010,
//	0b00011010,
//	0b00000110,
//
//#define charcode_oK  128+5
//	0b01001000+1,
//	0b01010100,
//	0b01100010,
//	0b01010100,
//	0b01001000,

//#define charcode_arrow_right	128 +6
//	0b01111100+1,
//	0b01000100,
//	0b01000100,
//	0b01000100,
//	0b00101000,
//	0b00010000,
//
//#define charcode_arrow_left	  128 +7
//	0b00010000+1,
//	0b00101000,
//	0b01000100,
//	0b01000100,
//	0b01000100,
//	0b01111100,


	0b00000000+1	// stopper for last char
};

uint16 charset1_offsets[256];

void charset1_init()
{
	for (uint16 i=0,j=32; i<NELEM(charset1); i++)
	{
		if (charset1[i] & 1) { charset1_offsets[j++] = i; }
	}
}





